#!/bin/bash

# Service name:      sleep_monitor
# Place in:          /userdata/system/services
# Make executable:   chmod +x sleep_monitor
# Usage:             batocera-services enable sleep_monitor

SERVICE_STATE="${1}"
LID_STATE_FILE="/proc/acpi/button/lid/LID0/state"
IDLE_THRESHOLD_MS=600000  # 10 minutes
CHECK_INTERVAL=5          # seconds
SLEEP_DURATION=300        # seconds before shutdown (5 min)

last_active_time=$(date +%s)

detect_sleep_mode() {
    local supported_modes
    supported_modes=$(cat /sys/power/state)

    if echo "${supported_modes}" | grep -qw "mem"; then
        echo "mem"
    elif echo "${supported_modes}" | grep -qw "standby"; then
        echo "standby"
    elif echo "${supported_modes}" | grep -qw "freeze"; then
        echo "freeze"
    else
        echo "none"
    fi
}

check_idle_evtest() {
    for dev in /dev/input/event*; do
        if evtest --query "${dev}" EV_KEY KEY_RESERVED 2>/dev/null | grep -q "value 1"; then
            last_active_time=$(date +%s)
            break
        fi
    done

    current_time=$(date +%s)
    idle_seconds=$((current_time - last_active_time))

    if [ "${idle_seconds}" -ge $((IDLE_THRESHOLD_MS / 1000)) ]; then
        echo "Idle time exceeded threshold (${idle_seconds}s)"
        return 0
    else
        return 1
    fi
}

monitor_loop() {
    local last_uptime=0
    local current_uptime=0

    while true; do
        current_uptime=$(cut -d. -f1 < /proc/uptime)

        # Detect wake from sleep by checking if uptime jumped
        if [ "$((current_uptime - last_uptime))" -gt "${CHECK_INTERVAL}" ]; then
            echo "System resumed from sleep"
        fi

        last_uptime="${current_uptime}"

        # Lid check
        if grep -q 'closed' "${LID_STATE_FILE}"; then
            echo "Lid closed detected"
            handle_sleep_and_shutdown
        fi

        # Idle check
        if check_idle_evtest; then
            handle_sleep_and_shutdown
        fi

        sleep "${CHECK_INTERVAL}"
    done
}

handle_sleep_and_shutdown() {
    echo "Preparing for sleep..."

    # Shutdown controllers (example: uhubctl)
    if command -v uhubctl >/dev/null 2>&1; then
        uhubctl -a off
        echo "Controllers powered off"
    fi

    sleep_mode=$(detect_sleep_mode)
    echo "Detected sleep mode: ${sleep_mode}"

    if [ "${sleep_mode}" != "none" ] && command -v rtcwake >/dev/null 2>&1; then
        rtcwake -m "${sleep_mode}" -s "${SLEEP_DURATION}"
        echo "System resumed from rtcwake sleep"
    else
        echo "Sleep not supported, delaying shutdown"
        sleep "${SLEEP_DURATION}"
    fi

    # Re-check lid state or idle time before shutdown
    if grep -q 'closed' "${LID_STATE_FILE}"; then
        echo "Lid still closed, proceeding to shutdown"
        poweroff
    elif check_idle_evtest; then
        echo "Still idle, proceeding to shutdown"
        poweroff
    else
        echo "User activity detected, aborting shutdown"
    fi
}

case "${SERVICE_STATE}" in
    start)
        echo "Starting sleep-monitor service..."
        monitor_loop &
        ;;
    stop)
        echo "Stopping sleep-monitor service..."
        pkill -f sleep_monitor
        ;;
    *)
        echo "Usage: $0 start|stop"
        exit 1
        ;;
esac

